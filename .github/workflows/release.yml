name: Tag Realse
on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    name: Build frontend/backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in *.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: 4.8.1
          build-root-directory: src/backend/ci
          arguments: -x test clean :core:boot-assembly:build -DmavenRepoUrl="http://maven.aliyun.com/nexus/content/groups/public/"
      - name: Create artifacts
        run: |
          mkdir result
          cd src/backend/ci/release/ && tar czvf backend.tar.gz *.jar
          cd $GITHUB_WORKSPACE && mv src/backend/ci/release/backend.tar.gz result/
          cd src/gateway/ && tar czf gateway.tar.gz ./core/
          cd $GITHUB_WORKSPACE && mv src/gateway/gateway.tar.gz result/
          tar czf result/config.tar.gz support-files/ scripts/
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: backend
          path: result/
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: bk-ci ${{ github.ref }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v1
        with:
          name: backend
          path: ./backend.zip
      - run: ls --color -lh
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./backend.zip
          asset_name: backend.zip
          asset_content_type: application/zip
