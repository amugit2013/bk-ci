name: Tag Realse
on:
  push:
    tags:
    - 'v*'

jobs:
  frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: yarn install && yarn start && yarn public
      working-directory: src/frontend
    - uses: actions/upload-artifact@v1
      with:
        name: frontend
        path: src/frontend/frontend/

  agent:
    name: Build agent on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: true
      max-parallel: 3
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.12
      - uses: actions/checkout@v2
      - run: ./build_linux.sh
        working-directory: src/agent/
        if: matrix.os == 'ubuntu-latest'
      - run: ./build_macos.sh
        working-directory: src/agent/
        if: matrix.os == 'macos-latest'
      - run: build_windows.bat
        shell: cmd
        working-directory: src/agent/
        if: matrix.os == 'windows-latest'
      - uses: actions/upload-artifact@v1
        with:
          name: agent
          path: src/agent/bin/

  backend:
    name: Build backend and release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in *.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: 4.8.1
          build-root-directory: src/backend/ci/core
          arguments: -x test clean build -DmavenRepoUrl="http://maven.aliyun.com/nexus/content/groups/public/"
      
      - name: Create artifact - Step1:init
        run: |
          mkdir -p bkci/frontend
          mkdir -p bkci/gateway
          mkdir -p bkci/agent-package
          mkdir -p bkci/agent-package/script/linux
          mkdir -p bkci/agent-package/upgrade
          mkdir -p bkci/agent-package/jar
      
      - name: Create artifact - Step2:Microservices
        run: |
          cp -rf src/agent/scripts/* bkci/agent-package/script/
          cp -r src/gateway/* bkci/gateway/

          cd src/backend/ci/release/
          mv -v worker-agent.jar $GITHUB_WORKSPACE/support-files/agent-package/jar/

          bootlist=`ls boot-*.jar`
          for bootfile in $bootlist
          do
              servicename=`echo $bootfile | awk -F "[-.]" '{print $2}'`
              mkdir -p $GITHUB_WORKSPACE/bkci/$servicename/
              cp -v boot-$servicename.jar $GITHUB_WORKSPACE/bkci/$servicename/
          done
      
      - name: Create artifact - Step3:Agent
        uses: actions/download-artifact@v1
        with:
          name: agent
          path: bkci/agent-package/upgrade/
      
      - name: Create artifact - Step4:Frontend
        uses: actions/download-artifact@v1
        with:
          name: frontend
          path: bkci/frontend/
      
      - name: Create artifact - Step5:support-files
        run: |
          cp -rf support-files/ bkci/
          cp -rf support-files/agent-package bkci/
          cp -rf scripts/ bkci/
          # 前端的模板文件需要动态生成
          cp -f bkci/frontend/console/frontend#console#index.html bkci/support-files/templates/frontend#console#index.html
          cp -f bkci/frontend/pipeline/frontend#pipeline#index.html bkci/support-files/templates/frontend#pipeline#index.html

          # BKCI服务列表写入project
          cp -f bkci/frontend/assets_bundle.json bkci/support-files/templates/project#assets_bundle.json
          echo $GITHUB_REF > bkci/VERSION

      - name: Create artifact - Step6:generate boot-service.sh
        run: |
          tpl_dir="./support-files/templates"
          tpl_tpl="$tpl_dir/boot-service.sh"
          echo " generate boot-service.sh from template: $tpl_tpl"
          [ -f "$tpl_tpl" ] || { echo "template not found: $tpl_tpl"; exit 1; }
          shopt -s nullglob
          backend_dirs=$(ls */boot-*.jar | sed -e 's@/[^/]*.jar@@' | sort -u | grep -Ev "assembly")
          shopt -u nullglob
          [ -z "$backend_dirs" ] && echo "NOTE: no service_dirs found, will do nothing."
          for service_name in $backend_dirs; do
              # 生成新的模板文件.
              # 大写.
              SERVICE_NAME=${service_name^^}
              # 新文件名
              tpl_name="$service_name#boot-$service_name.sh"
              tpl_file="$tpl_dir/$tpl_name"
              # 防止覆盖文件, 如果已经提供了启动脚本, 那么不自动生成了.
              [ -s "$tpl_file" ] && { echo "  SKIP: target file exist: $tpl_file"; continue; }
              echo "  generating $tpl_file"
              sed -e "s/bkciservice/$service_name/g" \
                  -e "s/BKCISERVICE/$SERVICE_NAME/g" \
                  "$tpl_tpl" > "$tpl_file"
          done
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: bk-ci ${{ github.ref }}
          draft: true
          prerelease: true
      
      - run: tar czvf bkci.tar.gz  bkci
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bkci.tar.gz
          asset_name: bkci.tar.gz
          asset_content_type: application/gzip
