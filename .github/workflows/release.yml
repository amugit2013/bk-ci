name: Tag Realse
on:
  push:
    tags:
    - 'v*'

jobs:
  frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"

    - uses: actions/cache@v1
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: yarn install && yarn start && yarn public
      working-directory: src/frontend
    - uses: actions/upload-artifact@v1
      with:
        name: frontend
        path: src/frontend/frontend/

  agent:
    name: Build agent on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
      fail-fast: true
      max-parallel: 3
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: 1.12
      - uses: actions/checkout@v2
      - run: ./build_linux.sh
        working-directory: src/agent/
        if: matrix.os == 'ubuntu-latest'
      - run: ./build_macos.sh
        working-directory: src/agent/
        if: matrix.os == 'macos-latest'
      - run: build_windows.bat
        shell: cmd
        working-directory: src/agent/
        if: matrix.os == 'windows-latest'
      - uses: actions/upload-artifact@v1
        with:
          name: agent
          path: src/agent/bin/

  backend:
    needs: [agent]
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: init mysql
        run: |
          sudo /etc/init.d/mysql start
          export MYSQL_PWD=root
          for i in *.sql;do echo $i;mysql -h localhost -uroot < $i;done
        working-directory: support-files/sql
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Gradle Build
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: 4.8.1
          build-root-directory: src/backend/ci
          arguments: -x test clean build -DmavenRepoUrl="http://maven.aliyun.com/nexus/content/groups/public/"
      - uses: actions/download-artifact@v1
        name: Download agent
        with:
          name: agent
          path: ./support-files/agent-package/upgrade/
      - name: Create artifacts
        run: |
          mkdir result
          cd src/backend/ci/release/
          mv worker-agent.jar $GITHUB_WORKSPACE/support-files/agent-package/jar
          tar czvf backend.tar.gz *.jar
          cd $GITHUB_WORKSPACE && mv src/backend/ci/release/backend.tar.gz result/
          cd src/gateway/ && tar czf gateway.tar.gz ./core/
          cd $GITHUB_WORKSPACE && mv src/gateway/gateway.tar.gz result/
          tar --exclude='./support-files/agent-package' czf result/config.tar.gz support-files/ scripts/
          tar czvf result/agent.tar.gz support-files/agent-package/
      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: backend
          path: result/
  
  release:
    needs: [frontend,backend]
    name: GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: bk-ci ${{ github.ref }}
          draft: false
          prerelease: false
      - uses: actions/download-artifact@v1
        name: Download backend
        with:
          name: backend
          path: ./backend/
      - uses: actions/download-artifact@v1
        name: Download frontend
        with:
          name: frontend
          path: ./frontend/
      - run: tar czvf bkci.tar.gz backend frontend
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bkci.tar.gz
          asset_name: bkci.tar.gz
          asset_content_type: application/gzip
